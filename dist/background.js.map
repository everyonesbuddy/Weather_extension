{"version":3,"file":"background.js","mappings":";;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;ACjBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;AC/BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;ACvBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;ACPA;;;;;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sources":["webpack://volume-control-chrome-extension/./src/utils/api.ts","webpack://volume-control-chrome-extension/./src/utils/storage.ts","webpack://volume-control-chrome-extension/webpack/bootstrap","webpack://volume-control-chrome-extension/webpack/runtime/define property getters","webpack://volume-control-chrome-extension/webpack/runtime/hasOwnProperty shorthand","webpack://volume-control-chrome-extension/webpack/runtime/make namespace object","webpack://volume-control-chrome-extension/./src/background/background.ts"],"sourcesContent":["var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nconst OPEN_WEATHER_API_KEY = \"e9504a3afd32c53cea6054764357a026\";\nexport const fetchWeather = (city, tempScale) => __awaiter(void 0, void 0, void 0, function* () {\n    const response = yield fetch(`https://api.openweathermap.org/data/2.5/weather?q=${city}&units=${tempScale}&appid=${OPEN_WEATHER_API_KEY}`);\n    if (!response.ok) {\n        throw new Error(\"Failed to fetch weather data\");\n    }\n    const data = yield response.json();\n    return data;\n});\n","export function setStoredCities(cities) {\n    return new Promise((resolve) => {\n        const data = { cities };\n        chrome.storage.local.set(data, () => {\n            resolve();\n        });\n    });\n}\nexport function getStoredCities() {\n    const keys = [\"cities\"];\n    return new Promise((resolve) => {\n        chrome.storage.local.get(keys, (data) => {\n            resolve(data.cities || []);\n        });\n    });\n}\nexport function setStoredOptions(options) {\n    const vals = { options };\n    return new Promise((resolve) => {\n        chrome.storage.local.set(vals, () => {\n            resolve();\n        });\n    });\n}\nexport function getStoredOptions() {\n    const keys = [\"options\"];\n    return new Promise((resolve) => {\n        chrome.storage.local.get(keys, (data) => {\n            resolve(data.options || { tempScale: \"metric\" });\n        });\n    });\n}\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","import { setStoredCities, setStoredOptions, getStoredCities, getStoredOptions, } from \"../utils/storage\";\nimport { fetchWeather } from \"../utils/api\";\nchrome.runtime.onInstalled.addListener(() => {\n    setStoredCities([]);\n    setStoredOptions({ tempScale: \"metric\", homeCity: \"\" });\n    chrome.contextMenus.create({\n        id: \"addCity\",\n        title: \"Add city to weather extention\",\n        contexts: [\"selection\"],\n    });\n    chrome.alarms.create({\n        periodInMinutes: 60,\n    });\n});\nchrome.contextMenus.onClicked.addListener((event) => {\n    getStoredCities().then((cities) => {\n        const updatedCities = [...cities, event.selectionText];\n        setStoredCities(updatedCities);\n    });\n});\nchrome.alarms.onAlarm.addListener(() => {\n    getStoredOptions().then((options) => {\n        if (!options.homeCity) {\n            return;\n        }\n        fetchWeather(options.homeCity, options.tempScale)\n            .then((data) => {\n            const temp = Math.round(data.main.temp);\n            const symbol = options.tempScale === \"metric\" ? \"°C\" : \"°F\";\n            chrome.action.setBadgeText({ text: `${temp}${symbol}` });\n        })\n            .catch(() => {\n            chrome.action.setBadgeText({ text: \"!\" });\n        });\n    });\n});\n"],"names":[],"sourceRoot":""}